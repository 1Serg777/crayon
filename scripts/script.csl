/*let str = "Hello, world!"

let g = 9.8
let m = 70*/

/*
Computing the mass of an object
*/

// let weight = m*g

// 1. Result: -14, Postfix form: 2 5 + 7 3 * -
// 2 + 5 - 7 * 3

// 2. Result: -4, Postfix form: 2 5 7 - 3 * +
// 2 + (5 - 7) * 3

// 3. Result: 36, Postfix form: 12 25 17 - 3 * +
// 12 + (25 - 17) * 3


// 4. GLSL vertex shader code

// #version 460 core

out gl_PerVertex {
    vec4 gl_Position;
    float gl_PointSize;
    float gl_ClipDistance[];
    float gl_CullDistance[];
};

// vec2[]() is a constructor, so we must check its type
// before we assign it to the "positions" variable.
/*
vec2 positions[3] = vec2[](
    vec2(0.0, 0.5),
    vec2(0.5, 0.5),
    vec2(0.5, 0.5)
);
*/
/*
vec2 positions[3] = vec2[](
    vec2( 0.0, -0.5),
    vec2(-0.5,  0.5),
    vec2( 0.5,  0.5)
);
*/

struct Light {
    vec3 position;
    float intensity;
} lightData;

vec2 positions[3] = {
    { 0.0, -0.5},
    {-0.5,  0.5},
    { 0.5,  0.5}
};

layout (location = 0) in vec3 vertPos;

// 1. Test this later!
// vec3 pos;

layout (local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

void main() {
    // 1. Test this later!
    // 
    // pos = vertPos;
    // gl_Position = vec4(pos, 1.0);

    // Implement type checking system first!
    // gl_Position = vec4(vertPos, 1.0);
    // gl_Position = vec4(vertPos, 1.0).xyzw;

    vec2 posV2;

    int a = 1;
    // int a1 = 00000008; // invalid octal digit
	int a2 = 00000007;
    int a3 = 25u;
	int b = 00000008.f;
	int c1 = 00000000;
    int c2 = 01030206u;
	// int d = 0x; // invalid hexadecimal number
	int e1 = 0x0;
    int e2 = 0x1ABCu;
	int f = 00000080000900045454.;
	float fl1 = 0x00000AB;
	// float fl2 = 0x00000AB.0; // invalid floating constant
	float fl3 = .0;
	// int ab = 09; // invalid octal digit '9'
	// int hex = 15ABC; // user-defined literal operator not found

    int test = a = b;
    int[] arr;

    float expFl1 = 1e2;
    float expFl2 = 1e-2LF;
    float expFl3 = 1.3e4f;
    float expFl3 = 2.75e-5lf;

    // gl_Position = vertPos;
}