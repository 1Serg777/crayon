ShaderProgram "Test Shader" {

    VertexInputLayout {
        vec4 pos  : POSITION;
	    vec3 norm : NORMAL;
	    vec2 uv0  : UV0;
    }

    FixedStagesConfig {
        // TODO
    }

    // Not allowed! At least one member must be declared!
    // This is in line with the structure and interface block declarations in core GLSL.
    MaterialProperties "LightData" {
        Integer id;
        Float intensity;
        Color color;
        Texture2D map;
    }
    // Should become the following uniform interface block in core GLSL:
    /*
    uniform LightData {
        int id;
        float intensity;
        vec4 color;
        sampler2D map;
    }
    */

    VertexShader {
        BEGIN

        // #version 460 core
        out gl_PerVertex {
            vec4 gl_Position;
            float gl_PointSize;
            float gl_ClipDistance[];
            float gl_CullDistance[];
        };
        // vec2[]() is a constructor, so we must check its type
        // before we assign it to the "positions" variable.
        /*
        vec2 positions[3] = vec2[](
            vec2(0.0, 0.5),
            vec2(0.5, 0.5),
            vec2(0.5, 0.5)
        );
        */
        /*
        vec2 positions[3] = vec2[](
            vec2( 0.0, -0.5),
            vec2(-0.5,  0.5),
            vec2( 0.5,  0.5)
        );
        */
        /*
        vec2 positions[3] = {
            { 0.0, -0.5},
            {-0.5,  0.5},
            { 0.5,  0.5}
        };
        */
        struct LightData {
            vec3 position;
            float intensity;
        } lightData, lightData2 = lightData;

        layout (location = 0) in vec3 vertPos;

        void main() {
            gl_Position = vec4(vertPos, 1.0);
        }

        END
    }

    TessellationControlShader {
        // TODO
    }

    TessellationEvaluationShader {
        // TODO
    }

    GeometryShader {
        // TODO
    }

    FragmentShader {
        // TODO
    }

}